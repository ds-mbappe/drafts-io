// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id              String   @id @default(cuid())
  title           String
  cover           String?
  topic           String?
  content         String?  @default("")
  private         Boolean  @default(true)
  locked          Boolean  @default(false)
  character_count Int?
  word_count      Int?
  author          User?    @relation(fields: [authorId, authorAvatar, authorFirstname, authorLastname], references: [id, avatar, firstname, lastname])
  authorId        String?
  authorAvatar    String?
  authorFirstname String?
  authorLastname  String?
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @updatedAt @map(name: "updated_at")
  likes           Like[]
  likeCount       Int      @default(0)
}

model Like {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
}

model User {
  id                        String     @id @default(cuid())
  email                     String     @unique
  password                  String
  username                  String?    @unique
  avatar                    String?
  firstname                 String?
  lastname                  String?
  phone                     String?
  language                  String?
  isVerified                Boolean?
  verifyToken               String?
  forgotPasswordToken       String?
  verifyTokenExpiry         DateTime?
  forgotPasswordTokenExpiry DateTime?
  documents                 Document[]
  createdAt                 DateTime   @default(now()) @map(name: "created_at")
  updatedAt                 DateTime   @updatedAt @map(name: "updated_at")
  followers                 Follows[]  @relation("following")
  following                 Follows[]  @relation("follower")
  accounts                  Account[]
  sessions                  Session[]
  likes                     Like[]

  @@unique([id, avatar, firstname, lastname])
  @@map(name: "users")
}

model Follows {
  id          Int    @id @default(autoincrement())
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}
