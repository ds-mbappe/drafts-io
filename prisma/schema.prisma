// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id                 String @default(cuid()) @id
  title              String
  cover              String?
  topic              String?
  content            String?   @default("")
  private            Boolean   @default(true)
  locked             Boolean   @default(false)
  character_count    Int?
  word_count         Int?
  author             User?     @relation(fields: [authorId, authorAvatar, authorFirstname, authorLastname], references: [id, avatar, firstname, lastname])
  authorId           String?
  authorAvatar       String?
  authorFirstname    String?
  authorLastname     String?
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @updatedAt @map(name: "updated_at")
}

model User {
  id                        String @default(cuid()) @id
  email                     String?
  password                  String
  username                  String?
  avatar                    String?
  firstname                 String?
  lastname                  String?
  phone                     String?
  language                  String?
  isVerified                Boolean?
  verifyToken               String?
  forgotPasswordToken       String?
  verifyTokenExpiry         DateTime?
  forgotPasswordTokenExpiry DateTime?
  documents                 Document[]
  createdAt                 DateTime @default(now()) @map(name: "created_at")
  updatedAt                 DateTime @updatedAt @map(name: "updated_at")

  accounts                  Account[]
  sessions                  Session[]

  @@map(name: "users")
  @@unique([id, avatar, firstname, lastname])
}